--- a/gridss.run.sh	2023-05-02 11:27:25
+++ b/gridss.run.sh	2023-05-02 11:30:08
@@ -48,13 +48,15 @@
 
     -r/--reference: reference genome to use.
     -o/--output: output VCF.
+    -a/--assembly: location of the GRIDSS assembly BAM. This file will be
+        created by GRIDSS.
     -t/--threads: number of threads to use. (Default: $threads)
     -j/--jar: location of GRIDSS jar
     -w/--workingdir: directory to place GRIDSS intermediate and temporary files
         .gridss.working subdirectories will be created. (Default: $workingdir)
     -s/--steps: processing steps to run. Defaults to all steps.
         Multiple steps are specified using comma separators. Possible steps are:
-        preprocess, assemble, calling, all
+        preprocess, assemble, call, all
     -e/--blacklist: BED file containing regions to ignore
     -c/--configuration: configuration file use to override default GRIDSS
         settings.
@@ -69,10 +71,14 @@
     -b/bams: comma separated full-path BAM files
     -f/filtered_bams: comma separated full-path filtered BAM files
     --jvmheap: size of JVM heap for the high-memory component of assembly and variant calling. (Default: $jvmheap)
+    --otherjvmheap: size of JVM heap for everything else. Useful to prevent
+        java out of memory errors when using large (>4Gb) reference genomes.
+        Note that some parts of assembly and variant calling use this heap
+        size. (Default: $otherjvmheap)
     "
 
-OPTIONS=r:o:t:j:w:e:s:c:l:b:f:
-LONGOPTS=reference:,output:,threads:,jar:,workingdir:,jvmheap:,blacklist:,steps:,configuration:,labels:,bams:,filtered_bams:
+OPTIONS=r:o:a:t:j:w:e:s:c:l:b:f:
+LONGOPTS=reference:,output:,assembly:,threads:,jar:,workingdir:,jvmheap:,otherjvmheap:,blacklist:,steps:,configuration:,labels:,bams:,filtered_bams:
 ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
 if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
 	# e.g. return value is 1
@@ -115,6 +121,15 @@
 			output_vcf="$2"
 			shift 2
 			;;
+		-a|--assembly)
+			if [[ "$assembly" == "" ]] ; then
+				assembly="$2"
+			else
+				assembly="$assembly $2"
+			fi
+			# TODO: support multiple assembly files
+			shift 2
+			;;
 		-e|--blacklist)
 			blacklist="$2"
 			shift 2
@@ -127,6 +142,10 @@
 			jvmheap="$2"
 			shift 2
 			;;
+		--otherjvmheap)
+			otherjvmheap="$2"
+			shift 2
+			;;
 		-t|--threads)
 			printf -v threads '%d\n' "$2" 2>/dev/null
 			printf -v threads '%d' "$2" 2>/dev/null
@@ -242,25 +261,43 @@
 write_status "Using reference genome \"$reference\""
 
 ##### --output
-if [[ "$output_vcf" == "" ]] ; then
-	write_status "$USAGE_MESSAGE"
-	write_status "Output VCF not specified. Use --output to specify output file."
-	exit $EX_USAGE
+if [[ $do_call == "true" ]] ; then
+	if [[ "$output_vcf" == "" ]] ; then
+		write_status "$USAGE_MESSAGE"
+		write_status "Output VCF not specified. Use --output to specify output file."
+		exit $EX_USAGE
+	fi
+	mkdir -p $(dirname $output_vcf)
+	if [[ ! -d $(dirname $output_vcf) ]] ; then
+		write_status "Unable to create directory for $output_vcf for output VCF."
+		exit $EX_CANTCREAT
+	fi
+	write_status "Using output VCF $output_vcf"
 fi
-mkdir -p $(dirname $output_vcf)
-if [[ ! -d $(dirname $output_vcf) ]] ; then
-	write_status "Unable to create directory for $output_vcf for output VCF."
-	exit $EX_CANTCREAT
-fi
-write_status "Using output VCF $output_vcf"
 
 ##### --assembly
-assembly=$output_vcf.assembly.bam
-write_status "Using assembly bam $assembly"
-mkdir -p $(dirname $assembly)
-if [[ ! -d $(dirname $assembly) ]] ; then
-	write_status "Unable to parent create directory for $assembly"
-	exit $EX_CANTCREAT
+if [[ $do_assemble == "true" ]] || [[ $do_call == "true" ]]; then
+	if [[ "$assembly" == "" ]] ; then
+		if [[ "$output_vcf" == "" ]] ; then
+			write_status "Either the assembly output file must explicitly specified with -a, or the output VCF specified with -o"
+			exit $EX_USAGE
+		fi
+		assembly=$output_vcf.assembly.bam
+	fi
+	write_status "Using assembly bam $assembly"
+	if [[ $do_assemble == "true" ]] ; then
+		mkdir -p $(dirname $assembly)
+		if [[ ! -d $(dirname $assembly) ]] ; then
+			write_status "Unable to parent create directory for $assembly"
+			exit $EX_CANTCREAT
+		fi
+	else
+		if [[ ! -f $assembly ]] ; then
+			write_status "Missing assembly file $assembly"
+			write_status "Ensure the GRIDSS assembly step has been run"
+			exit $EX_NOINPUT
+		fi
+	fi
 fi
 
 ##### --threads
@@ -433,12 +470,12 @@
 	elif [[ "$step" == "preprocess" ]] ; then
 		do_preprocess=true
 		steps_message="$steps_message pre-process"
-	elif [[ "$step" == "assembly" ]] ; then
+	elif [[ "$step" == "assemble" ]] ; then
 		do_assemble=true
 		steps_message="$steps_message assembly"
-	elif [[ "$step" == "calling" ]] ; then
+	elif [[ "$step" == "call" ]] ; then
 		do_call=true
-		steps_message="$steps_message calling"
+		steps_message="$steps_message call"
 	else
 		write_status "Unknown step \"$step\""
 		exit $EX_USAGE
