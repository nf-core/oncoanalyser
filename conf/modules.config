/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'WRITE_REFERENCE_DATA' {
        def date = new java.util.Date().format('yyyyMMdd_HHmmss');
        publishDir = [
            path: { "${params.outdir}/reference_data/${workflow_version}/${date}" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'STAR_GENOMEGENERATE' {
        ext.args = '--genomeSAindexNbases 14 --sjdbOverhang 200 --genomeChrBinNbits 15'
    }

    withName: 'GATK4_MARKDUPLICATES' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/alignments/rna/${filename}" },
        ]
    }

    withName: 'MARKDUPS' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/alignments/dna/${filename}" },
        ]
    }

    withName: 'AMBER' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'COBALT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: '.*:GRIDSS_SVPREP_CALLING:(?:PREPROCESS|ASSEMBLE|CALL)' {
        ext.otherJvmHeap = 4.GB
    }

    withName: '.*:GRIDSS_SVPREP_CALLING:DEPTH_ANNOTATOR' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/gridss/${filename}" }
        ]
    }

    withName: '.*:GRIPSS_FILTERING:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/gripss/germline/${filename}" },
        ]
    }

    withName: '.*:GRIPSS_FILTERING:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/gripss/somatic/${filename}" },
        ]
    }

    withName: '.*:SAGE_CALLING:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/sage/${filename}" },
        ]
    }

    withName: '.*:SAGE_CALLING:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/sage/${filename}" },
        ]
    }

    withName: '.*:SAGE_APPEND:(?:GERMLINE|SOMATIC)' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/sage/append/${filename}" },
        ]
    }

    withName: '.*:PAVE_ANNOTATION:(?:GERMLINE|SOMATIC)' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/pave/${filename}" },
        ]
    }

    withName: 'PURPLE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: '.*:LINX_ANNOTATION:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/germline_annotations/" },
        ]
    }

    withName: '.*:LINX_ANNOTATION:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_annotations/" },
        ]
    }

    withName: '.*:LINX_PLOTTING:VISUALISER' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_plots/" },
        ]
    }

    withName: '.*:LINX_PLOTTING:REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/${filename}" },
        ]
    }

    withName: 'BAMTOOLS' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/bamtools/${filename}" },
        ]
    }

    withName: 'CHORD' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'EXTRACTCONTIG' {
        // Run is an boolean input value passed to the process that is conditioned on whether there are runnable
        // inputs for LILAC
        ext.when = { run }
    }

    withName: 'LILAC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" }
        ]
    }

    withName: 'SIGS' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'VIRUSBREAKEND' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/virusbreakend/${filename}" },
        ]
    }

    withName: 'VIRUSINTERPRETER' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'ISOFOX' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'CUPPA' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/flagstats/${filename}" },
        ]
    }

    withName: 'ORANGE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            // NOTE(SW): java.io.File and Nextflow's file do not work here, resorting to string splitting
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    return null
                } else {
                    def tokens = filename.split('[/]')
                    return "${meta.key}/orange/${tokens[-1]}"
                }
            }
        ]
    }

}
