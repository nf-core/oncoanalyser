/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'WRITE_REFERENCE_DATA' {
        publishDir = [
            path: { "${params.outdir}/reference_data/${workflow.manifest.version}" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'FASTP' {
        ext.args = '--disable_quality_filtering --disable_length_filtering --disable_adapter_trimming --disable_trim_poly_g'
    }

    withName: 'STAR_GENOMEGENERATE' {
        ext.args = '--genomeSAindexNbases 14 --sjdbOverhang 200 --genomeChrBinNbits 15'
    }

    withName: 'GATK4_MARKDUPLICATES' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/alignments/rna/${filename}") },
        ]
    }

    withName: 'REDUX' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/alignments/dna/${filename}") },
        ]
    }

    withName: 'AMBER' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'COBALT' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: '.*:ESVEE_CALLING:ESVEE' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: '.*:SAGE_CALLING:SAGE_GERMLINE' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/sage_calling/${filename}") },
        ]
    }

    withName: '.*:SAGE_CALLING:SAGE_SOMATIC' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/sage_calling/${filename}") },
        ]
    }

    withName: '.*:SAGE_APPEND:SAGE_APPEND_GERMLINE' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/sage_append/germline") },
        ]
    }

    withName: '.*:SAGE_APPEND:SAGE_APPEND_SOMATIC' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/sage_append/somatic") },
        ]
    }

    withName: '.*:PAVE_ANNOTATION:PAVE_(?:GERMLINE|SOMATIC)' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/pave/${filename}") },
        ]
    }

    withName: 'PURPLE' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: '.*:LINX_ANNOTATION:LINX_GERMLINE' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/linx/germline_annotations/") },
        ]
    }

    withName: '.*:LINX_ANNOTATION:LINX_SOMATIC' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/linx/somatic_annotations/") },
        ]
    }

    withName: '.*:LINX_PLOTTING:LINX_VISUALISER' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/linx/somatic_plots/") },
        ]
    }

    withName: '.*:LINX_PLOTTING:LINXREPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/linx/${filename}") },
        ]
    }

    withName: 'CIDER' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'BAMTOOLS' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/bamtools/${filename}") },
        ]
    }

    withName: 'CHORD' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'EXTRACTCONTIG' {
        // Run is an boolean input value passed to the process that is conditioned on whether there are runnable
        // inputs for LILAC
        ext.when = { run }
    }

    withName: 'LILAC' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'SIGS' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'TEAL.*' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.id}/teal/${new File(filename).name}") },
        ]
    }

    withName: 'VIRUSBREAKEND' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/virusbreakend/${filename}") },
        ]
    }

    withName: 'VIRUSINTERPRETER' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'ISOFOX' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'NEO_SCORER' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/neo/scorer/") },
        ]
    }

    withName: '.*:NEO_PREDICTION:NEO_ANNOTATE_FUSIONS' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/neo/annotated_fusions/${filename}") },
        ]
    }

    withName: 'NEO_FINDER' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/neo/finder/") },
        ]
    }

    withName: 'WISP' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'CUPPA' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'PEACH' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/${filename}") },
        ]
    }

    withName: 'ORANGE' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            // NOTE(SW): java.io.File and Nextflow's file do not work here, resorting to string splitting
            saveAs: { filename -> get_saveas_path(meta, task, filename, "${meta.key}/orange/${filename.split('[/]')[-1]}") },
        ]
    }

    withName: 'COBALT_PANEL_NORMALISATION' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "panel_resources/${filename}", panel_resource_creation = true) },
        ]
    }

    withName: 'PAVE_PON_PANEL_CREATION' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "panel_resources/${filename}", panel_resource_creation = true) },
        ]
    }

    withName: 'ISOFOX_PANEL_NORMALISATION' {
        ext.log_level = { "${params.hmftools_log_level}" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> get_saveas_path(meta, task, filename, "panel_resources/${filename}", panel_resource_creation = true) },
        ]
    }

}

def get_saveas_path(meta, task, filename, path, panel_resource_creation=false) {
    if (filename.equals('versions.yml')) {
        return null
    } else if (filename.contains('.command.')) {
        if (filename ==~ /.*\.command\.(sh|out|err|log|run)/) {
            def process_name = task.process.toLowerCase().replaceFirst(/^.+:/, '')

            if (panel_resource_creation) {
                return "panel_resources/logs/${process_name}${filename}"
            } else {
                return "${meta.key}/logs/${meta.id}.${process_name}${filename}"
            }

        } else {
            return null
        }
    } else {
        return path
    }
}
