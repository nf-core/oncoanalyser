/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: 'AMBER' {
        ext.jarPath = '/opt/conda/share/hmftools-amber-3.9-1/amber.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: 'COBALT' {
        ext.jarPath = '/opt/conda/share/hmftools-cobalt-1.13-1/cobalt.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml',
        ]
    }

    withName: '.*:GRIDSS(?!_SVPREP).*' {
        ext.jarPath = '/opt/conda/share/gridss-2.13.2-1/gridss.jar'
        ext.otherJvmHeap = 4.GB
    }

    withName: '.*:GRIDSS:CALL' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            // NOTE(SW): java.io.File and Nextflow's file do not work here, resorting to string splitting
            saveAs: { filename ->
                if(filename.equals('versions.yml')) {
                    return null
                } else {
                    def tokens = filename.split('[/]')
                    return "${meta.id}/gridss/${tokens[-1]}"
                }
            }
        ]
    }

    withName: 'GRIPSS.*' {
        ext.jarPath = '/opt/gripss/gripss.jar'
    }

    withName: '.*GRIPSS_GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/gripss/germline/${filename}" },
        ]
    }

    withName: '.*GRIPSS_SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/gripss/somatic/${filename}" },
        ]
    }

    withName: 'LILAC_PROCESS' {
        ext.jarPath = '/opt/lilac/lilac.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" }
        ]
    }

    withName: '.*LINX:.*' {
        ext.jarPath = '/opt/linx/linx.jar'
    }

    withName: '.*LINX_GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/germline_annotations/" },
        ]
    }

    withName: '.*LINX_SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_annotations/" },
        ]
    }

    withName: '.*LINX:VISUALISER' {
        ext.path_circos = 'circos'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_plots/" },
        ]
    }

    withName: 'LINX_REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'PAVE.*' {
        ext.jarPath = '/opt/pave/pave.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/pave/${filename}" },
        ]
    }

    withName: 'COLLECTWGSMETRICS' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/wgs_metrics/${filename}" },
        ]
    }

    withName: 'PURPLE' {
        ext.jarPath = '/opt/purple/purple.jar'
        ext.circosPath = 'circos'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: 'SAGE_GERMLINE' {
        ext.jarPath = '/opt/sage/sage.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/sage/germline/${filename}" },
        ]
    }

    withName: 'SAGE_SOMATIC' {
        ext.jarPath = '/opt/sage/sage.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/sage/somatic/${filename}" },
        ]
    }

    withName: 'SIGS' {
        ext.jarPath = '/opt/sigs/sigs.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: 'CHORD' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/chord/${filename}" },
        ]
    }

    withName: 'VIRUSBREAKEND' {
        ext.jarPath = '/opt/conda/share/gridss-2.13.2-1/gridss.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/virusbreakend/${filename}" },
        ]
    }

    withName: 'VIRUSINTERPRETER' {
        ext.jarPath = '/opt/virusinterpreter/virusinterpreter.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'ISOFOX' {
        ext.jarPath = '/opt/isofox/isofox.jar'
        ext.args = '-functions "TRANSCRIPT_COUNTS;ALT_SPLICE_JUNCTIONS;FUSIONS;RETAINED_INTRONS"'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'CUPPA_CLASSIFIER' {
        ext.jarPath = '/opt/cuppa/cuppa.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/cuppa/${filename}" },
        ]
    }

    withName: 'CUPPA_VISUALISER' {
        ext.chartScriptPath = '/opt/cuppa/chart/cuppa-chart.py'
        ext.reportScriptPath = '/opt/cuppa/report/CupGenerateReport_pipeline.R'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/cuppa/${filename}" },
        ]
    }
}
