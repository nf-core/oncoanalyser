/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'AMBER' {
        ext.jarPath = '/opt/conda/share/hmftools-amber-3.9-1/amber.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: 'COBALT' {
        ext.jarPath = '/opt/conda/share/hmftools-cobalt-1.13-1/cobalt.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: '.*:GRIDSS_SVPREP_CALLING:(?:DEPTH_ANNOTATOR|SVPREP_TUMOR|SVPREP_NORMAL)' {
        ext.jarPath = '/opt/svprep/svprep.jar'
    }

    withName: '.*:GRIDSS_SVPREP_CALLING:(?:PREPROCESS|ASSEMBLE|CALL)' {
        ext.jarPath = '/opt/conda/share/gridss-2.13.2-1/gridss.jar'
        ext.otherJvmHeap = 4.GB
    }

    withName: '.*:GRIDSS_SVPREP_CALLING:DEPTH_ANNOTATOR' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/gridss/${filename}" }
        ]
    }

    withName: '.*:GRIPSS_FILTERING:(?:GERMLINE|SOMATIC)' {
        ext.jarPath = '/opt/gripss/gripss.jar'
    }

    withName: '.*:GRIPSS_FILTERING:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/gripss/germline/${filename}" },
        ]
    }

    withName: '.*:GRIPSS_FILTERING:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/gripss/somatic/${filename}" },
        ]
    }

    withName: '.*:SAGE_CALLING:(?:GERMLINE|SOMATIC)' {
        ext.jarPath = '/opt/sage/sage.jar'
    }

    withName: '.*:SAGE_CALLING:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/sage/germline/${filename}" },
        ]
    }

    withName: '.*:SAGE_CALLING:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/sage/somatic/${filename}" },
        ]
    }

    withName: '.*:SAGE_APPEND:(?:GERMLINE|SOMATIC)' {
        ext.jarPath = '/opt/sage/sage.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/sage/append/${filename}" },
        ]
    }

    withName: '.*:PAVE_ANNOTATION:(?:GERMLINE|SOMATIC)' {
        ext.jarPath = '/opt/pave/pave.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/pave/${filename}" },
        ]
    }

    withName: 'PURPLE' {
        ext.jarPath = '/opt/purple/purple.jar'
        ext.circosPath = 'circos'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: '.*:LINX_ANNOTATION:(?:GERMLINE|SOMATIC)|.*:LINX_PLOTTING:VISUALISER' {
        ext.jarPath = '/opt/linx/linx.jar'
    }

    withName: '.*:LINX_ANNOTATION:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/germline_annotations/" },
        ]
    }

    withName: '.*:LINX_ANNOTATION:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_annotations/" },
        ]
    }

    withName: '.*:LINX_PLOTTING:VISUALISER' {
        ext.path_circos = '/opt/conda/bin/circos'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_plots/" },
        ]
    }

    withName: '.*:LINX_PLOTTING:GPGR' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/${filename}" },
        ]
    }

    withName: 'BAMTOOLS' {
        ext.jarPath = '/opt/bamtools/bamtools.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id_simple}/bamtools/${filename}" },
        ]
    }

    withName: 'CHORD' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/chord/${filename}" },
        ]
    }

    withName: 'LILAC' {
        ext.jarPath = '/opt/lilac/lilac.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" }
        ]
    }

    withName: 'SIGS' {
        ext.jarPath = '/opt/sigs/sigs.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/${filename}" },
        ]
    }

    withName: 'VIRUSBREAKEND' {
        ext.jarPath = '/opt/conda/share/gridss-2.13.2-1/gridss.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/virusbreakend/${filename}" },
        ]
    }

    withName: 'VIRUSINTERPRETER' {
        ext.jarPath = '/opt/virusinterpreter/virusinterpreter.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/virusinterpreter/${filename}" },
        ]
    }

    withName: 'ISOFOX' {
        ext.jarPath = '/opt/isofox/isofox.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'CUPPA' {
        ext.jarPath = '/opt/cuppa/cuppa.jar'
        ext.chartScriptPath = '/opt/cuppa/chart/cuppa-chart.py'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT' {
        container = { "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
            'https://depot.galaxyproject.org/singularity/samtools:1.12--h9aed4be_1' :
            'quay.io/biocontainers/samtools:1.12--h9aed4be_1' }" }
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id_simple}/flagstats/${filename}" },
        ]
    }

    withName: 'ORANGE' {
        ext.jarPath = '/opt/orange/orange.jar'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            // NOTE(SW): java.io.File and Nextflow's file do not work here, resorting to string splitting
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    return null
                } else {
                    def tokens = filename.split('[/]')
                    return "${meta.id}/orange/${tokens[-1]}"
                }
           }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml',
        ]
    }

}
