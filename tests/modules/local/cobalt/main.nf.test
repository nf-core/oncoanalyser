nextflow_process {

    name "Test Process COBALT"
    script "modules/local/cobalt/main.nf"
    process "COBALT"

    test("COBALT testing tumor + normal") {

        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'// define parameters here. Example:
            }
            process {
                """
                // define inputs of the process here. Example:
                // input[0] = file("test-file.txt")

                input[0] = [
                    [id: 'test',
                    tumor_id: 'tumor_test',
                    normal_id: 'normal_test'
                    ],
                
                    file(params.test_sample_data +  'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data +  'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data +  'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    file(params.test_sample_data +  'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                
                ]
                input[1] = file("/home/rhassaine/resource_files_oa/38/results/reference_data/1.0.0/20250203_101759/hmf_data_5.34_38--2/dna_pipeline/copy_number/GC_profile.1000bp.38.cnp")
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            def cobalt_output_dir = process.out.cobalt_dir[0][1]
            
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert path(cobalt_output_dir).resolve("cobalt.version").exists() },
                { assert path(cobalt_output_dir).resolve("tumor_test.cobalt.gc.median.tsv").exists() },
                { assert path(cobalt_output_dir).resolve("tumor_test.cobalt.ratio.pcf").exists() },
                { assert path(cobalt_output_dir).resolve("tumor_test.cobalt.ratio.tsv.gz").exists() },
                { assert path(cobalt_output_dir).resolve("normal_test.cobalt.gc.median.tsv").exists() },
                { assert path(cobalt_output_dir).resolve("normal_test.cobalt.ratio.median.tsv").exists() },
                { assert path(cobalt_output_dir).resolve("normal_test.cobalt.ratio.pcf").exists() },
                { assert path(process.out.versions[0]).exists() }
            )
        }

    }

    test("COBALT with tumor only") {
        when {
            params {
                // publish_dir_mode = "symlink"
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'tumor_test'],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    [],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = file("/home/rhassaine/resource_files_oa/38/results/reference_data/1.0.0/20250203_101759/hmf_data_5.34_38--2/dna_pipeline/copy_number/GC_profile.1000bp.38.cnp")
                input[2] = file("/home/rhassaine/resource_files_oa/38/results/reference_data/1.0.0/20250203_101759/hmf_data_5.34_38--2/dna_pipeline/copy_number/DiploidRegions.38.bed.gz")
                input[3] = []
                """
            }
        }

       then {
        def cobalt_output_dir = process.out.cobalt_dir[0][1]
        
        assertAll(
            { assert process.success },
            { assert snapshot(process.out).match() },
            { assert path(cobalt_output_dir).resolve("cobalt.version").exists() },
            { assert path(cobalt_output_dir).resolve("tumor_test.cobalt.gc.median.tsv").exists() },
            { assert path(cobalt_output_dir).resolve("tumor_test.cobalt.ratio.pcf").exists() },
            { assert path(cobalt_output_dir).resolve("tumor_test.cobalt.ratio.tsv.gz").exists() },
            { assert path(process.out.versions[0]).exists() }
    )
}
        }
    }
