nextflow_process {

    name "Test Process AMBER"
    script "modules/local/amber/main.nf"
    process "AMBER"

    test("AMBER testing tumor + normal") {

        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'// define parameters here. Example:
            }
            process {
                """
                // define inputs of the process here. Example:
                // input[0] = file("test-file.txt")

                input[0] = [
                    [id: 'test',
                    tumor_id: 'tumor_test',
                    normal_id: 'normal_test'
                    ],
                
                    file(params.test_sample_data +  'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data +  'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data +  'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    file(params.test_sample_data +  'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                
                ]

                input[1] = 38 // ref_genome_version
                input[2] = file("https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/reference_data/hmftools/5.34_38--2/dna_pipeline/copy_number/AmberGermlineSites.38.tsv.gz")
                input[3] = []
                """
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            // def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // assert process.success
            // assert snapshot(process.out).match()
            def amber_output_dir = process.out.amber_dir[0][1]

            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match() },
            { assert path(amber_output_dir).resolve("amber.version").exists() },
            { assert path(amber_output_dir).resolve("normal_test.amber.homozygousregion.tsv").exists() },
            { assert path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz").exists() },
            { assert path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz.tbi").exists() },
            { assert path(amber_output_dir).resolve("tumor_test.amber.baf.pcf").exists() },
            { assert path(amber_output_dir).resolve("tumor_test.amber.baf.tsv.gz").exists() },
            { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.tsv").exists() },
            { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz").exists() },
            { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz.tbi").exists() },
            { assert path(amber_output_dir).resolve("tumor_test.amber.qc").exists() },
            { assert path(process.out.versions[0]).exists() }
            )
        }

    }

//     test("AMBER with tumor only") {
//         when {
//             params {
//                 // publish_dir_mode = "symlink"
//                 test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
//             }
//             process {
//                 """
//                 input[0] = [
//                     [id: 'test', tumor_id: 'tumor_test'],
//                     file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
//                     [],
//                     file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
//                     []
//                 ]
//                 input[1] = 38
//                 input[2] = file("/home/rhassaine/resource_files_oa/38/results/reference_data/1.0.0/20250203_101759/hmf_data_5.34_38--2/dna_pipeline/copy_number/AmberGermlineSites.38.tsv.gz")
//                 input[3] = []
//                 """
//             }
//         }

//         then {
//             // assert process.success
//             // assert snapshot(process.out).match()
//             def amber_output_dir = process.out.amber_dir[0][1]

//             assertAll(
//             { assert process.success },
//             { assert snapshot(process.out).match() },
//             { assert path(amber_output_dir).resolve("amber.version").exists() },
//             { assert path(amber_output_dir).resolve("normal_test.amber.homozygousregion.tsv").exists() },
//             { assert path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz").exists() },
//             { assert path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz.tbi").exists() },
//             { assert path(amber_output_dir).resolve("tumor_test.amber.baf.pcf").exists() },
//             { assert path(amber_output_dir).resolve("tumor_test.amber.baf.tsv.gz").exists() },
//             { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.tsv").exists() },
//             { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz").exists() },
//             { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz.tbi").exists() },
//             { assert path(amber_output_dir).resolve("tumor_test.amber.qc").exists() },
//             { assert path(process.out.versions[0]).exists() }
//             )
//         }
//     }

}
