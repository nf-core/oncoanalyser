/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/oncoanalyser Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input = null

    // Workflow mode
    mode = null

    // Process configuration
    processes_manual  = false
    processes_include = null
    processes_exclude = null

    // Reference genome information; iGenomes is effectively disabled but retained for linting
    genome          = null
    force_genome    = false
    igenomes_base   = 's3://ngi-igenomes/igenomes'
    igenomes_ignore = true
    hmf_genome_base = 'https://pub-cf6ba01919994c3cbd354659947f74d8.r2.dev/genomes'

    // Other reference data and config exposed to user on CLI
    max_fastq_records        = 10000000

    isofox_counts            = null
    isofox_gc_ratios         = null
    isofox_gene_ids          = null
    isofox_tpm_norm          = null
    isofox_read_length       = null
    isofox_functions         = 'TRANSCRIPT_COUNTS;ALT_SPLICE_JUNCTIONS;FUSIONS;RETAINED_INTRONS'

    gridss_config            = null

    prepare_reference_only   = false
    create_stub_placeholders = false

    // Boilerplate options
    outdir           = null
    publish_dir_mode = 'copy'
    email            = null
    email_on_fail    = null
    plaintext_email  = false
    monochrome_logs  = false
    hook_url         = null
    help             = false
    version          = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory = '128.GB'
    max_cpus   = 16
    max_time   = '240.h'

    // Parameter lint ignore list
    // NOTE(SW): entries here are generally have conditional defaults or are for internal use only
    lint_ignore = [
        'lint_ignore',
        'genome_type',
        'genome_version',
        'genomes',
        'hmf_genome_base',
        'hmf_data_paths',
        'panel',
        'panel_data_paths',
        'ref_data',
        'ref_data_genome_alt',
        'ref_data_genome_bwamem2_index',
        'ref_data_genome_dict',
        'ref_data_genome_fai',
        'ref_data_genome_fasta',
        'ref_data_genome_gridss_index',
        'ref_data_genome_gtf',
        'ref_data_genome_star_index',
        'ref_data_hla_slice_bed',
        'ref_data_hmf_data_path',
        'ref_data_panel_data_path',
        'ref_data_virusbreakenddb_path',
    ]

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = true
    validationSchemaIgnoreParams     = "igenomes_base,${lint_ignore.join(',')}"
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load data configs
includeConfig 'conf/hmf_data.config'
includeConfig 'conf/hmf_genomes.config'
includeConfig 'conf/panel_data.config'

// Load panel configuration if needed
if (params.containsKey('mode') && params.mode == 'targeted') {
    includeConfig 'conf/targeted_parameters.config'
}

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/oncoanalyser custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/oncoanalyser.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/oncoanalyser profiles: ${params.custom_config_base}/pipeline/oncoanalyser.config")
}
profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    test_stub { includeConfig 'conf/test_stub.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/oncoanalyser'
    author          = """Stephen Watts"""
    homePage        = 'https://github.com/nf-core/oncoanalyser'
    description     = """A comprehensive cancer DNA/RNA analysis and reporting pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.5'
    version         = '1.1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
